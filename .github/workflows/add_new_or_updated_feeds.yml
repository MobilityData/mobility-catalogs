name: Add new or updated feeds from Google Sheets/Form

on:
    workflow_dispatch:
    schedule:
      - cron: '55 3 * * *' # At 00:00 ETC every day

env:
    DATE_FORMAT: "[0-9]{1,2}/[0-9]{1,2}/[0-9]{4}|[0-9]{4}-[0-9]{2}-[0-9]{2}" # this is the format we need to compare dates between the CSV and the local system.
    DATE_FORMAT_DESIRED: "MM/dd/yyyy"
    
    USERNAME: "github-actions[bot]" # GitHub username that will create the PR
    USERNAME_EMAIL: "41898282+github-actions[bot]@users.noreply.github.com"
    
    ORGANIZATION: MobilityData # organization name
    REPO_NAME: mobility-database-catalogs # repository name
    BASE: "main"
    API_REPO_NAME: mobility-feed-api
    API_TRIGGER_EVENT: catalog-sources-updated

    REVIEWERS_JSON: "[\"emmambd\"]" # List of GitHub usernames of the reviewers, in a JSON array : ["username1", "username2"]

    GTFS_SCHEDULE_CATALOG_PATH_FROM_ROOT: "catalogs/sources/gtfs/schedule/"
    GTFS_REALTIME_CATALOG_PATH_FROM_ROOT: "catalogs/sources/gtfs/realtime/"

jobs:
  add-new-updated-feeds:
    runs-on: ubuntu-latest
    steps:
      - name: Setup global variables
        id: global_vars
        run: |
            echo "TODAYS_DATE=$(date +%m/%d/%Y)" >> $GITHUB_ENV # Ex.: 07/27/2023
            echo "TODAYS_DAY=$(date '+%d')" >> $GITHUB_ENV # Ex.: 27
            echo "TODAYS_MONTH=$(date '+%m')" >> $GITHUB_ENV # Ex.: 07
            echo "TODAYS_YEAR=$(date '+%Y')" >> $GITHUB_ENV # Ex.: 2023
            echo "YESTERDAYS_DATE=$(date -d "yesterday" +"%m/%d/%Y")" >> $GITHUB_ENV # Ex.: 07/26/2023

      - name: Create branch name
        id: create_branch_name
        run: |
            echo "BRANCH=${{ env.TODAYS_YEAR }}-${{ env.TODAYS_MONTH }}-${{ env.TODAYS_DAY }}-SOURCES" >> $GITHUB_OUTPUT # Branch name

      - name: Load secrets from 1Password
        id: onepw_secrets
        uses: 1password/load-secrets-action@v1.3.1
        with:
            export-env: true # Export loaded secrets as environment variables
        env:
            OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
            CREDENTIALS: "op://rbiv7rvkkrsdlpcrz3bmv7nmcu/ifkeehu5gzi7wy5ub5qvwkaire/credential"
            CSV_URL: "op://rbiv7rvkkrsdlpcrz3bmv7nmcu/qkn5esttmtojawglm4l6t2bqaa/al2gjfhiuddabkp7o26hszuvia"
            SLACK_WEBHOOK_URL: "op://rbiv7rvkkrsdlpcrz3bmv7nmcu/Slack webhook URLs/internal-public-transit-support channel"

    #   - name: Get swift version # just for verification, can leave commented out
    #     run: swift --version
    # Swift is installed by default on github runners, tested with v 5.8.1

      - name: Checkout repo
        id: checkout_repo
        uses: actions/checkout@v4
        with:
            ref: ${{ env.BASE }}
            fetch-depth: 0
            token: ${{ env.CREDENTIALS }}

      - name: Create new branch
        shell: bash
        run: |
            git pull
            git checkout -b ${{ steps.create_branch_name.outputs.BRANCH }}
            git reset --hard ${{ env.BASE }}
            git clean -df

      - name: Download CSV and process each lines
        id: process-csv
        run: |
            cd ${{ github.workspace }}/scripts
            OUTPUT=$(swift process_csv_in_github_action.swift "${{ env.CSV_URL }}" "${{ env.YESTERDAYS_DATE }}" "${{ env.DATE_FORMAT }}" "${{ env.DATE_FORMAT_DESIRED }}")
            echo "PYTHON_SCRIPT_ARGS=${OUTPUT}" >> $GITHUB_OUTPUT
            
            # Count the number of feeds in the output
            COUNT=$(echo "$input_string" | grep -o '§' | wc -l)
            COUNT=$((COUNT + 1))
            echo "NUMBER_OF_FEEDS=${COUNT}" >> $GITHUB_OUTPUT

      - name: Setup Python
        if: steps.process-csv.outputs.PYTHON_SCRIPT_ARGS != ''
        uses: actions/setup-python@v4.7.0
        with:
          python-version: '3.11' # install the python version needed

      - name: Create + activate a Python virtual env & run script
        if: steps.process-csv.outputs.PYTHON_SCRIPT_ARGS != ''
        env:
          PYTHONPATH: ${{ github.workspace }}/tools
          PYTHONIOENCODING: "utf8" #ascii
        shell: bash
        run: |
            python -m venv env
            source env/bin/activate
            pip install --upgrade pip
            pip install virtualenv --quiet
            pip install gtfs_kit --quiet
            pip install unidecode --quiet

            echo "BEGIN"

            sections=$(echo '${{ steps.process-csv.outputs.PYTHON_SCRIPT_ARGS }}' | sed 's/""/"/g' | awk -F'§' '{for (i=1; i<=NF; i++) print $i}')
            for section in "${sections[@]}"; do
                echo "processing line: ${section}"
                eval "python -c 'from tools.operations import *; ${section}'"
                echo " "
            done

      - name: Commit & push
        if: steps.process-csv.outputs.PYTHON_SCRIPT_ARGS != ''
        uses: EndBug/add-and-commit@v9.1.3
        with:
            github_token: ${{ env.CREDENTIALS }}
            new_branch: ${{ steps.create_branch_name.outputs.BRANCH }}
            author_name: ${{ env.USERNAME }}
            author_email: ${{ env.USERNAME_EMAIL }}
            committer_name: ${{ env.USERNAME }}
            committer_email: ${{ env.USERNAME_EMAIL }}
            message: "Automated commit — New/Updated feed"

      - name: Trigger Update in API
        if: steps.process-csv.outputs.PYTHON_SCRIPT_ARGS != ''
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ env.CREDENTIALS }}
          repository: ${{ env.ORGANIZATION }}/${{ env.API_REPO_NAME }}
          event-type: ${{ env.API_TRIGGER_EVENT }}
  
      - name: Post notification in Slack channel of update
        if: steps.process-csv.outputs.PYTHON_SCRIPT_ARGS != ''
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "channel": "G01BLNPU0M8",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "✅ Added/updated feed(s)",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.process-csv.outputs.NUMBER_OF_FEEDS }} feed(s) were added or updated in a new branch on the <$GITHUB_SERVER_URL/$GITHUB_REPOSITORY|mobility-database-catalogs> repo."
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "New branch name: `${{ steps.create_branch_name.outputs.BRANCH }}`\n\n*Open the new branch:* ${{ GITHUB_SERVER_URL }}/${{ GITHUB_REPOSITORY }}/tree/${{ steps.create_branch_name.outputs.BRANCH }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Post notification in Slack in case of failure
        if: failure()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "channel": "G01BLNPU0M8",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "❌ FAILED — Add/update feed(s)",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "The GitHub action has failed on the <https://github.com/MobilityData/mobility-database-catalogs|mobility-database-catalogs> repo."
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Open the action run:* ${{ GITHUB_SERVER_URL }}/${{ GITHUB_REPOSITORY }}/actions/runs/${{ GITHUB_RUN_ID }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
